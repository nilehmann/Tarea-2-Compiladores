import java_cup.runtime.*;

action code {: 

    int curr_lineno() {
	return ((CoolLexer)parser.getScanner()).getCurrentLine()+1;
    }

    String curr_filename() {
	return ((CoolLexer)parser.getScanner()).getFileName();
    }
:} 

/************************************************************************/
/*                DONT CHANGE ANYTHING IN THIS SECTION                  */

parser code {:
    int omerrs = 0;

    public void syntax_error(Symbol cur_token) {
        int lineno = action_obj.curr_lineno();
		String filename = action_obj.curr_filename();
	        System.err.print("\"" + filename + "\", line " + lineno + 
			         ": parse error at or near ");
	        Utilities.printToken(cur_token);
		omerrs++;
		if (omerrs>50) {
		   System.err.println("More than 50 errors");
		   System.exit(1);
		}
    }
   
    public void unrecovered_syntax_error(Symbol cur_token) {    
		omerrs++;
    }
:}

/* Declaration of all the terminal symbols, including the type of 
   their attributes, if applicable. */
terminal CLASS, ELSE, FI, IF, IN, INHERITS, LET, LET_STMT, LOOP, POOL, THEN, WHILE;
terminal CASE, ESAC, OF, DARROW, NEW;

terminal ASSIGN, NOT, ERROR;

terminal NEG, ISVOID;
terminal EQ, LE, LT;
terminal PLUS, DIV, MINUS, MULT, DOT;

terminal COMMA, SEMI, COLON;
terminal LPAREN, RPAREN, AT, LBRACE, RBRACE;

terminal String STR_CONST;
terminal String INT_CONST;
terminal Boolean BOOL_CONST;
terminal String TYPEID, OBJECTID;

/**************************************************************************/
nonterminal Program program;
nonterminal Classes class_list;
nonterminal Class_ class;
nonterminal Features feature_list;
nonterminal Feature	feature;
nonterminal Formals formals, non_empty_formals;
nonterminal Expression expr;
nonterminal Formal formal;
nonterminal Expressions param_list, non_empty_param_list;
nonterminal Expressions expr_list;
nonterminal Expression let_list;
nonterminal Cases cases;




/* Precedence declarations go here. */
precedence right ASSIGN;
precedence left NOT;
precedence nonassoc EQ,LT,LE;
precedence left PLUS, MINUS;
precedence left MULT, DIV;
precedence left ISVOID;
precedence left NEG;
precedence left AT;
precedence left DOT;


program	
	::= class_list:cl
	    {: RESULT = new Program(curr_lineno(), cl); :}
        ;

class_list
	/* single class */
	::= class:c SEMI
	    {: RESULT = (new Classes(curr_lineno())).appendElement(c); :}
	/* several classes */
	| class_list:cl class:c SEMI
	    {: RESULT = cl.appendElement(c); :}
	| class_list:cl error SEMI
		{: RESULT = cl; :}
	| error SEMI
		{: RESULT = new Classes(curr_lineno()); :}
	;

/* If no parent is specified, the class inherits from the Object class */
class
	::= CLASS TYPEID:n LBRACE feature_list:f RBRACE
	    {: RESULT = new Class_(curr_lineno(), n, "Object", 
				   f, curr_filename()); :}
	| CLASS TYPEID:n INHERITS TYPEID:p LBRACE feature_list:f RBRACE
	    {: RESULT = new Class_(curr_lineno(), n, p, f, curr_filename()); :}
	;

/* Feature list may be empty, but no empty features in list. */
feature_list
	::= /* empty */
	    {: RESULT = new Features(curr_lineno()); :}
	| feature_list:fl feature:f
		{: RESULT = fl.appendElement(f); :}
	;

feature
	::= OBJECTID:name LPAREN formals:fl RPAREN COLON TYPEID:rt LBRACE expr:e RBRACE SEMI 
		{: RESULT = new method(curr_lineno(), name, fl, rt, e); :}
	| OBJECTID:name COLON TYPEID:type ASSIGN expr:e SEMI 
		{: RESULT = new attr(curr_lineno(), name, type, e); :}
	| OBJECTID:name COLON TYPEID:type SEMI
		{: RESULT = new attr(curr_lineno(), name, type, new no_expr(curr_lineno())); :}
	| error SEMI
	;

formals
	::= /*empty*/
		{: RESULT = new Formals(curr_lineno()); :}
	| non_empty_formals:fl
		{: RESULT = fl; :}
	;

non_empty_formals
	::= formal:f
		{: RESULT = new Formals(curr_lineno()).appendElement(f); :}
	| non_empty_formals:fl COMMA formal:f
		{: RESULT = fl.appendElement(f); :}
	;


formal 
	::= OBJECTID:name COLON TYPEID:type
		{: RESULT = new Formal(curr_lineno(), name, type); :}
	;


param_list
	::= /*empty*/
		{: RESULT = new Expressions(curr_lineno()); :}
	| non_empty_param_list:pl
		{: RESULT = pl; :}
	;
non_empty_param_list
	::= expr:e
		{: RESULT = new Expressions(curr_lineno()).appendElement(e); :}
	| non_empty_param_list:pl COMMA expr:e
		{: RESULT = pl.appendElement(e); :}
	;
	
	
expr_list
	::= expr:e SEMI
		{: RESULT = new Expressions(curr_lineno()).appendElement(e); :}
	| expr_list:el expr:e SEMI
		{: RESULT = el.appendElement(e); :}
	| expr_list:el error SEMI
		{: RESULT = el; :}
	| error SEMI 
		{: RESULT = new Expressions(curr_lineno()); :}
	;
	
expr
	::= OBJECTID:name ASSIGN expr:e
		{: RESULT = new assign(curr_lineno(), name, e); :}
	| expr:e DOT OBJECTID:name LPAREN param_list:pl RPAREN
		{: RESULT = new dispatch(curr_lineno(), e, name, pl); :}
	| expr:e AT TYPEID:type DOT OBJECTID:name LPAREN param_list:pl RPAREN
		{: RESULT = new static_dispatch(curr_lineno(), e, type, name, pl); :}
	| OBJECTID:name LPAREN param_list:pl RPAREN
		{: RESULT = new dispatch(curr_lineno(),new object(curr_lineno(), "self"), name, pl); :}
	| IF expr:pred THEN expr:then_expr ELSE expr:else_expr FI
		{: RESULT = new cond(curr_lineno(), pred, then_expr, else_expr); :} 
	| WHILE expr:pred LOOP expr:body POOL
		{: RESULT = new loop(curr_lineno(), pred, body); :}
	| LBRACE expr_list:le RBRACE
		{: RESULT = new block(curr_lineno(), le); :}	
	| LET let_list:let 
		{: RESULT = let; :}
	| NEW TYPEID:type
		{: RESULT = new new_(curr_lineno(), type); :}
	| ISVOID expr:e
		{: RESULT = new isvoid(curr_lineno(), e); :}
	| expr:e1 PLUS expr:e2
		{: RESULT = new plus(curr_lineno(), e1,e2); :}
	| expr:e1 MINUS expr:e2
		{: RESULT = new sub(curr_lineno(), e1,e2); :}
	| expr:e1 MULT expr:e2
		{: RESULT = new mul(curr_lineno(), e1,e2); :}
	| expr:e1 DIV expr:e2
		{: RESULT = new divide(curr_lineno(), e1,e2); :}
		
	| expr:e1 LT expr:e2
		{: RESULT = new lt(curr_lineno(), e1,e2); :}
	| expr:e1 LE expr:e2
		{: RESULT = new leq(curr_lineno(), e1,e2); :}
	| expr:e1 EQ expr:e2
		{: RESULT = new eq(curr_lineno(), e1,e2); :}
		
	| NEG expr:e
		{: RESULT = new neg(curr_lineno(), e); :}
	| NOT expr:e
		{: RESULT = new comp(curr_lineno(), e); :}
	| LPAREN expr:e RPAREN
		{: RESULT = e; :}
	| OBJECTID:name
		{: RESULT = new object(curr_lineno(), name); :}
	| INT_CONST:c
		{: RESULT = new int_const(curr_lineno(), c); :}
	| STR_CONST:c
		{: RESULT = new string_const(curr_lineno(), c); :}	
	| BOOL_CONST:c
		{: RESULT = new bool_const(curr_lineno(), c); :}
		
	| CASE expr:e OF cases:cs ESAC
		{: RESULT = new typecase(curr_lineno(), e, cs); :}
	;
		
cases
	::= OBJECTID:name COLON TYPEID:type DARROW expr:e SEMI
		{: RESULT = new Cases(curr_lineno()).appendElement(new Branch(curr_lineno(), name, type, e)); :}
	| cases:cs OBJECTID:name COLON TYPEID:type DARROW expr:e SEMI
		{: RESULT = cs.appendElement( new Branch(curr_lineno(), name, type, e)); :}
	;

let_list
	::= OBJECTID:name COLON TYPEID:type ASSIGN expr:e IN expr:body
		{: RESULT = new let(curr_lineno(), name, type, e, body); :}
	| OBJECTID:name COLON TYPEID:type IN expr:body
		{: RESULT = new let(curr_lineno(), name, type, new no_expr(curr_lineno()), body); :}
	| OBJECTID:name COLON TYPEID:type ASSIGN expr:e COMMA let_list:ll
		{: RESULT = new let(curr_lineno(), name, type, e, ll); :}
	| OBJECTID:name COLON TYPEID:type COMMA let_list:ll
		{: RESULT = new let(curr_lineno(), name, type, new no_expr(curr_lineno()), ll); :}
	| error COMMA let_list:ll
		{: RESULT = ll; :}
	;