/* The following code was generated by JFlex 1.4.3 on 5/22/13 11:43 PM */

/*
 *  The scanner definition for COOL.
 */

import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 5/22/13 11:43 PM from the specification file
 * <tt>cool.flex</tt>
 */
class CoolLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int SINGLE_COMMENT = 6;
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 4;
  public static final int STRERROR = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\1\53\10\0\1\56\1\3\2\1\1\2\22\0\1\56\1\0\1\52"+
    "\5\0\1\60\1\62\1\61\1\63\1\70\1\57\1\77\1\64\12\4"+
    "\1\72\1\71\1\66\1\67\1\76\1\0\1\73\1\15\1\7\1\11"+
    "\1\42\1\21\1\23\1\7\1\31\1\25\2\7\1\13\1\7\1\27"+
    "\1\40\1\44\1\7\1\33\1\17\1\35\1\50\1\37\1\46\3\7"+
    "\1\0\1\54\2\0\1\5\1\0\1\16\1\55\1\12\1\43\1\22"+
    "\1\24\1\10\1\32\1\26\2\10\1\14\1\10\1\30\1\41\1\45"+
    "\1\10\1\34\1\20\1\36\1\51\1\6\1\47\3\10\1\74\1\0"+
    "\1\75\1\65\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\1\1\3\1\1\1\4\1\1"+
    "\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6"+
    "\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6"+
    "\1\5\1\6\1\5\1\6\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\3\3\1\2\2\1\1\1\34"+
    "\1\1\2\5\2\6\2\5\2\6\2\5\2\6\1\35"+
    "\1\6\1\35\1\5\1\36\1\37\1\6\1\36\1\37"+
    "\2\5\2\6\1\5\2\6\2\40\1\5\1\6\1\5"+
    "\1\6\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\47\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\2\5\2\6\1\57\1\5\1\57\1\6\2\5\3\6"+
    "\2\5\2\6\1\60\1\61\1\60\1\61\1\5\2\6"+
    "\1\5\1\6\1\5\1\6\1\0\1\5\1\62\1\6"+
    "\1\62\2\63\1\64\1\65\1\64\1\65\1\6\2\5"+
    "\2\6\2\66\1\67\2\70\1\5\1\6\2\71\1\72"+
    "\2\5\2\6\2\73\1\74\1\5\1\74\1\6\1\5"+
    "\1\6\2\75";

  private static int [] zzUnpackAction() {
    int [] result = new int[178];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\300\0\u0100\0\u0140\0\u0140\0\u0180"+
    "\0\u01c0\0\u0200\0\u01c0\0\u0240\0\u0280\0\u02c0\0\u0300\0\u0340"+
    "\0\u0380\0\u03c0\0\u0400\0\u0440\0\u0480\0\u04c0\0\u0500\0\u0540"+
    "\0\u0580\0\u05c0\0\u0600\0\u0640\0\u0680\0\u06c0\0\u0700\0\u0140"+
    "\0\u0740\0\u0780\0\u07c0\0\u0140\0\u0140\0\u0140\0\u0140\0\u0800"+
    "\0\u0840\0\u0140\0\u0140\0\u0140\0\u0140\0\u0140\0\u0140\0\u0140"+
    "\0\u0880\0\u0140\0\u0140\0\u0140\0\u08c0\0\u0900\0\u0940\0\u0980"+
    "\0\u09c0\0\u0140\0\u0a00\0\u0140\0\u0a40\0\u0a80\0\u0ac0\0\u0b00"+
    "\0\u0b40\0\u0b80\0\u0bc0\0\u0c00\0\u0c40\0\u0c80\0\u0cc0\0\u0d00"+
    "\0\u0d40\0\u0200\0\u0d80\0\u01c0\0\u0dc0\0\u0200\0\u0e00\0\u0e40"+
    "\0\u01c0\0\u0e80\0\u0ec0\0\u0f00\0\u0f40\0\u0f80\0\u0fc0\0\u1000"+
    "\0\u1040\0\u0200\0\u01c0\0\u1080\0\u10c0\0\u1100\0\u1140\0\u0140"+
    "\0\u0140\0\u0140\0\u0140\0\u0140\0\u0140\0\u0140\0\u0140\0\u1180"+
    "\0\u0140\0\u0140\0\u0140\0\u0140\0\u0140\0\u0140\0\u11c0\0\u1200"+
    "\0\u1240\0\u1280\0\u0200\0\u12c0\0\u01c0\0\u1300\0\u1340\0\u1380"+
    "\0\u13c0\0\u1400\0\u1440\0\u1480\0\u14c0\0\u1500\0\u1540\0\u0200"+
    "\0\u0200\0\u01c0\0\u01c0\0\u1580\0\u15c0\0\u1600\0\u1640\0\u1680"+
    "\0\u16c0\0\u1700\0\u1180\0\u1740\0\u0200\0\u1780\0\u01c0\0\u0200"+
    "\0\u01c0\0\u0200\0\u0200\0\u01c0\0\u01c0\0\u17c0\0\u1800\0\u1840"+
    "\0\u1880\0\u18c0\0\u0200\0\u01c0\0\u01c0\0\u0200\0\u01c0\0\u1900"+
    "\0\u1940\0\u0200\0\u01c0\0\u01c0\0\u1980\0\u19c0\0\u1a00\0\u1a40"+
    "\0\u0200\0\u01c0\0\u0200\0\u1a80\0\u01c0\0\u1ac0\0\u1b00\0\u1b40"+
    "\0\u0200\0\u01c0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[178];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\3\7\1\10\1\6\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\12\1\13\1\12\1\13\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\12"+
    "\1\13\1\12\1\13\1\30\1\31\1\12\1\32\1\33"+
    "\1\12\1\13\1\34\1\35\1\36\1\37\1\12\1\13"+
    "\1\40\2\6\1\13\1\7\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\6\1\60\3\61\1\62\46\61"+
    "\1\63\1\64\1\65\23\61\60\66\1\67\1\70\16\66"+
    "\2\4\1\71\1\72\74\4\3\73\1\74\46\73\1\74"+
    "\1\73\1\75\23\73\104\0\1\10\77\0\46\13\3\0"+
    "\1\13\26\0\46\12\3\0\1\12\26\0\7\12\2\76"+
    "\2\77\33\12\3\0\1\12\26\0\7\13\2\100\2\101"+
    "\33\13\3\0\1\13\26\0\15\12\2\102\15\12\2\103"+
    "\10\12\3\0\1\12\26\0\15\13\2\104\15\13\2\105"+
    "\10\13\3\0\1\13\26\0\7\12\2\106\2\12\2\107"+
    "\31\12\3\0\1\12\26\0\7\13\2\110\2\13\2\111"+
    "\31\13\3\0\1\13\26\0\21\12\2\112\23\12\3\0"+
    "\1\12\26\0\11\13\2\113\6\13\2\114\23\13\3\0"+
    "\1\13\26\0\13\12\2\115\2\12\2\116\2\12\2\117"+
    "\21\12\3\0\1\12\26\0\13\13\2\120\2\13\2\121"+
    "\2\13\2\122\21\13\3\0\1\13\26\0\15\12\2\123"+
    "\15\12\2\124\10\12\3\0\1\12\26\0\15\13\2\125"+
    "\15\13\2\126\10\13\3\0\1\13\26\0\25\12\2\127"+
    "\17\12\3\0\1\12\26\0\25\13\2\130\2\131\15\13"+
    "\3\0\1\13\26\0\17\12\2\132\25\12\3\0\1\12"+
    "\26\0\17\13\2\133\25\13\3\0\1\13\26\0\34\12"+
    "\2\134\10\12\3\0\1\12\26\0\34\13\2\135\10\13"+
    "\3\0\1\13\26\0\25\12\2\136\17\12\3\0\1\12"+
    "\26\0\25\13\2\137\17\13\3\0\1\13\101\0\1\140"+
    "\101\0\1\141\100\0\1\142\74\0\1\143\7\0\1\144"+
    "\106\0\1\145\1\0\3\61\1\0\46\61\3\0\23\61"+
    "\3\146\1\147\2\146\1\150\15\146\1\151\3\146\1\147"+
    "\5\146\1\152\14\146\1\153\1\146\1\154\1\150\21\146"+
    "\60\66\2\0\16\66\61\0\1\155\100\0\1\156\20\0"+
    "\1\72\74\0\3\73\1\0\46\73\1\0\30\73\1\7"+
    "\46\73\1\0\25\73\4\0\11\12\2\157\33\12\3\0"+
    "\1\12\26\0\13\12\2\160\31\12\3\0\1\12\26\0"+
    "\11\13\2\161\33\13\3\0\1\13\26\0\13\13\2\162"+
    "\31\13\3\0\1\13\26\0\31\12\2\163\13\12\3\0"+
    "\1\12\26\0\34\12\2\164\10\12\3\0\1\12\26\0"+
    "\31\13\2\165\13\13\3\0\1\13\26\0\34\13\2\166"+
    "\10\13\3\0\1\13\26\0\13\12\2\167\31\12\3\0"+
    "\1\12\26\0\11\12\2\170\33\12\3\0\1\12\26\0"+
    "\13\13\2\171\31\13\3\0\1\13\26\0\11\13\2\172"+
    "\33\13\3\0\1\13\26\0\7\13\2\173\35\13\3\0"+
    "\1\13\26\0\2\12\1\174\30\12\1\174\12\12\3\0"+
    "\1\12\26\0\25\12\2\175\17\12\3\0\1\12\26\0"+
    "\2\13\1\176\30\13\1\176\12\13\3\0\1\13\26\0"+
    "\25\13\2\177\17\13\3\0\1\13\26\0\42\12\2\200"+
    "\2\12\3\0\1\12\26\0\31\12\2\201\13\12\3\0"+
    "\1\12\26\0\42\13\2\202\2\13\3\0\1\13\26\0"+
    "\31\13\2\203\13\13\3\0\1\13\26\0\15\12\2\204"+
    "\27\12\3\0\1\12\26\0\15\13\2\205\27\13\3\0"+
    "\1\13\26\0\44\13\2\206\3\0\1\13\26\0\34\12"+
    "\2\207\10\12\3\0\1\12\26\0\34\13\2\210\10\13"+
    "\3\0\1\13\26\0\21\12\2\211\23\12\3\0\1\12"+
    "\26\0\21\13\2\212\23\13\3\0\1\13\25\0\1\147"+
    "\2\0\1\213\47\0\1\213\25\0\13\12\2\214\31\12"+
    "\3\0\1\12\26\0\15\12\2\215\27\12\3\0\1\12"+
    "\26\0\13\13\2\216\31\13\3\0\1\13\26\0\15\13"+
    "\2\217\27\13\3\0\1\13\26\0\40\12\2\220\4\12"+
    "\3\0\1\12\26\0\40\13\2\221\4\13\3\0\1\13"+
    "\26\0\15\12\2\222\27\12\3\0\1\12\26\0\5\12"+
    "\2\223\37\12\3\0\1\12\26\0\15\13\2\224\27\13"+
    "\3\0\1\13\26\0\5\13\2\225\37\13\3\0\1\13"+
    "\26\0\13\13\2\226\31\13\3\0\1\13\26\0\34\12"+
    "\2\227\10\12\3\0\1\12\26\0\15\12\2\230\27\12"+
    "\3\0\1\12\26\0\34\13\2\231\10\13\3\0\1\13"+
    "\26\0\15\13\2\232\27\13\3\0\1\13\26\0\23\12"+
    "\2\233\21\12\3\0\1\12\26\0\23\13\2\234\21\13"+
    "\3\0\1\13\26\0\15\13\2\235\27\13\3\0\1\13"+
    "\26\0\7\12\2\236\35\12\3\0\1\12\26\0\7\13"+
    "\2\237\35\13\3\0\1\13\26\0\7\12\2\240\35\12"+
    "\3\0\1\12\26\0\7\13\2\241\35\13\3\0\1\13"+
    "\26\0\13\12\2\242\31\12\3\0\1\12\26\0\13\13"+
    "\2\243\31\13\3\0\1\13\26\0\15\13\2\244\27\13"+
    "\3\0\1\13\26\0\21\12\2\245\23\12\3\0\1\12"+
    "\26\0\27\12\2\246\15\12\3\0\1\12\26\0\21\13"+
    "\2\247\23\13\3\0\1\13\26\0\27\13\2\250\15\13"+
    "\3\0\1\13\26\0\15\12\2\251\27\12\3\0\1\12"+
    "\26\0\15\13\2\252\27\13\3\0\1\13\26\0\36\12"+
    "\2\253\6\12\3\0\1\12\26\0\21\12\2\254\23\12"+
    "\3\0\1\12\26\0\36\13\2\255\6\13\3\0\1\13"+
    "\26\0\21\13\2\256\23\13\3\0\1\13\26\0\31\12"+
    "\2\257\13\12\3\0\1\12\26\0\31\13\2\260\13\13"+
    "\3\0\1\13\26\0\13\12\2\261\31\12\3\0\1\12"+
    "\26\0\13\13\2\262\31\13\3\0\1\13\22\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7040];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\3\1\2\11\30\1\1\11\3\1\4\11\2\1"+
    "\7\11\1\1\3\11\5\1\1\11\1\1\1\11\43\1"+
    "\10\11\1\1\6\11\34\1\1\0\47\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[178];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    // Max size of string constants
    static int MAX_STR_CONST = 1025;
    static String messageError;
    private String filename;

    // For assembling string constants
    StringBuffer buf = new StringBuffer();

	public int getCurrentLine(){
		return yyline;
	}
	
	public void setFileName(String file){
		filename = file;
	}
	public String getFileName(){
		return filename;
	}
	
	static private int commentLevel = -1;



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  CoolLexer(java.io.Reader in) {
      // empty for now
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  CoolLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 166) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 25: 
          { yybegin(YYINITIAL); return new Symbol(sym.ERROR, "Unterminated string constant");
          }
        case 62: break;
        case 38: 
          { return new Symbol(sym.DARROW);
          }
        case 63: break;
        case 60: 
          { return new Symbol(sym.ISVOID);
          }
        case 64: break;
        case 28: 
          { yybegin(YYINITIAL); return new Symbol(sym.ERROR, messageError);
          }
        case 65: break;
        case 19: 
          { return new Symbol(sym.COLON);
          }
        case 66: break;
        case 30: 
          { return new Symbol(sym.IF);
          }
        case 67: break;
        case 59: 
          { return new Symbol(sym.WHILE);
          }
        case 68: break;
        case 39: 
          { buf.append(yytext().charAt(1));
          }
        case 69: break;
        case 61: 
          { return new Symbol(sym.INHERITS);
          }
        case 70: break;
        case 45: 
          { commentLevel++;
          }
        case 71: break;
        case 35: 
          { return new Symbol(sym.ERROR, "Unmatched *)");
          }
        case 72: break;
        case 40: 
          { buf.append('\n');
          }
        case 73: break;
        case 58: 
          { return new Symbol(sym.BOOL_CONST, false);
          }
        case 74: break;
        case 31: 
          { return new Symbol(sym.IN);
          }
        case 75: break;
        case 16: 
          { return new Symbol(sym.EQ);
          }
        case 76: break;
        case 20: 
          { return new Symbol(sym.AT);
          }
        case 77: break;
        case 34: 
          { commentLevel = 1; yybegin(COMMENT);
          }
        case 78: break;
        case 44: 
          { buf.append('\b');
          }
        case 79: break;
        case 55: 
          { return new Symbol(sym.BOOL_CONST, true);
          }
        case 80: break;
        case 4: 
          { return new Symbol(sym.INT_CONST, yytext());
          }
        case 81: break;
        case 14: 
          { return new Symbol(sym.NEG);
          }
        case 82: break;
        case 11: 
          { return new Symbol(sym.RPAREN);
          }
        case 83: break;
        case 51: 
          { return new Symbol(sym.LOOP);
          }
        case 84: break;
        case 47: 
          { return new Symbol(sym.LET);
          }
        case 85: break;
        case 8: 
          { return new Symbol(sym.MINUS);
          }
        case 86: break;
        case 12: 
          { return new Symbol(sym.PLUS);
          }
        case 87: break;
        case 2: 
          { yybegin(YYINITIAL);
          }
        case 88: break;
        case 53: 
          { return new Symbol(sym.ESAC);
          }
        case 89: break;
        case 50: 
          { return new Symbol(sym.CASE);
          }
        case 90: break;
        case 52: 
          { return new Symbol(sym.ELSE);
          }
        case 91: break;
        case 48: 
          { return new Symbol(sym.NEW);
          }
        case 92: break;
        case 21: 
          { return new Symbol(sym.LBRACE);
          }
        case 93: break;
        case 43: 
          { yybegin(STRERROR); messageError = "String contains escaped null character.";
          }
        case 94: break;
        case 37: 
          { return new Symbol(sym.LE);
          }
        case 95: break;
        case 10: 
          { return new Symbol(sym.MULT);
          }
        case 96: break;
        case 17: 
          { return new Symbol(sym.COMMA);
          }
        case 97: break;
        case 54: 
          { return new Symbol(sym.THEN);
          }
        case 98: break;
        case 24: 
          { buf.append(yytext());
          }
        case 99: break;
        case 3: 
          { return new Symbol(sym.ERROR, yytext());
          }
        case 100: break;
        case 29: 
          { return new Symbol(sym.FI);
          }
        case 101: break;
        case 36: 
          { return new Symbol(sym.ASSIGN);
          }
        case 102: break;
        case 6: 
          { return new Symbol(sym.OBJECTID, yytext());
          }
        case 103: break;
        case 32: 
          { return new Symbol(sym.OF);
          }
        case 104: break;
        case 57: 
          { return new Symbol(sym.CLASS);
          }
        case 105: break;
        case 23: 
          { return new Symbol(sym.DOT);
          }
        case 106: break;
        case 42: 
          { buf.append('\t');
          }
        case 107: break;
        case 18: 
          { return new Symbol(sym.SEMI);
          }
        case 108: break;
        case 26: 
          { yybegin(YYINITIAL);
					  if(buf.length() >= 1025)
					  	return new Symbol(sym.ERROR, "String constant too long"); 
					  return new Symbol(sym.STR_CONST, buf.toString());
          }
        case 109: break;
        case 15: 
          { return new Symbol(sym.LT);
          }
        case 110: break;
        case 5: 
          { return new Symbol(sym.TYPEID, yytext());
          }
        case 111: break;
        case 9: 
          { return new Symbol(sym.LPAREN);
          }
        case 112: break;
        case 33: 
          { yybegin(SINGLE_COMMENT);
          }
        case 113: break;
        case 27: 
          { yybegin(STRERROR); messageError = "String contains null character.";
          }
        case 114: break;
        case 56: 
          { return new Symbol(sym.POOL);
          }
        case 115: break;
        case 49: 
          { return new Symbol(sym.NOT);
          }
        case 116: break;
        case 46: 
          { commentLevel--; if(commentLevel == 0) yybegin(YYINITIAL);
          }
        case 117: break;
        case 41: 
          { buf.append('\f');
          }
        case 118: break;
        case 22: 
          { return new Symbol(sym.RBRACE);
          }
        case 119: break;
        case 13: 
          { return new Symbol(sym.DIV);
          }
        case 120: break;
        case 7: 
          { buf.setLength(0); yybegin(STRING);
          }
        case 121: break;
        case 1: 
          { 
          }
        case 122: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {     switch(yystate()) {
	    case YYINITIAL:
			break;
		case COMMENT:
			yybegin(YYINITIAL);
			return new Symbol(sym.ERROR, "EOF in comment");
		case SINGLE_COMMENT:
			yybegin(YYINITIAL);
			break;
		case STRING:
			yybegin(YYINITIAL);
			return new Symbol(sym.ERROR, "EOF in string constant");
    }
    return new Symbol(sym.EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
